Total: 1300 samples
     958  73.7%  73.7%     1300 100.0% worker
     256  19.7%  93.4%      256  19.7% __strcmp_sse42
      45   3.5%  96.8%      175  13.5% SortedList_insert
      27   2.1%  98.9%      164  12.6% SortedList_lookup
      11   0.8%  99.8%       11   0.8% _init
       2   0.2%  99.9%        2   0.2% hash
       1   0.1% 100.0%        1   0.1% __clock_gettime
       0   0.0% 100.0%     1300 100.0% __clone
       0   0.0% 100.0%     1300 100.0% start_thread
ROUTINE ====================== worker in /u/eng/ugrad/beb/lab2b/lab2_list.c
   958   1300 Total samples (flat / cumulative)
     .      .  105: 
     .      .  106:     return hash;
     .      .  107: }
     .      .  108: 
     .      .  109: // Thread routine
---
     .      .  110: void* worker(void* tID){
     .      .  111: 
     .      .  112: 	// Lock timers
     .      .  113: 	struct timespec lock_start, lock_end;
     .      .  114: 
     .      .  115: 	SubList_t *sublist;
     .      .  116: 	pthread_mutex_t *curr_mutex;
     .      .  117: 	int *curr_spin_lock;
     .      .  118: 
     .      .  119: 	// Insert elements into list
     .      .  120: 
     .      .  121: //	fprintf(stderr, "Before insertion\n");
     .      .  122: 
     .      .  123: 	/* Fine Grained Locking */
     .      .  124: 	int i;
     .      .  125: 	for(i = *(int*)tID; i < numelems; i+= numthreads){
     .      .  126: 		sublist = &sublist_arr[hash(elements[i].key) % numlists];
     .      .  127: 		long long wait_time;
     .      .  128: 		switch(m_sync){
     .      .  129: 			
     .      .  130: 			// Mutex
     .      .  131: 			case 'm':
     .      .  132: 				curr_mutex = &sublist->mutex;
     .      .  133: 				
     .      .  134: 				// Time the wait for thread to acquire mutex
     .      .  135: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  136: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  137: 					exit(1);
     .      .  138: 				}
     .      .  139: 				pthread_mutex_lock(curr_mutex);
     .      .  140: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  141: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  142: 					exit(1);
     .      .  143: 				}
     .      .  144: 
     .      .  145: 				// Calculate wait time
     .      .  146: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  147: 				locktimers[*(int*)tID] += wait_time;
     .      .  148: 
     .      .  149: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  150: 				pthread_mutex_unlock(curr_mutex);
     .      .  151: 				break;
     .      .  152: 			
     .      .  153: 			// Spin-lock
     .      .  154: 			case 's':
     .      .  155: 				curr_spin_lock = &sublist->spin_lock;
     .      .  156: 
     .      .  157: 				// Time the wait for thread to acquire spin-lock
     .      1  158: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  159: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  160: 					exit(1);
     .      .  161: 				}
   486    486  162: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  163: 					;
     .      .  164: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  165: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  166: 					exit(1);
     .      .  167: 				}
     .      .  168: 
     .      .  169: 				// Calculate wait time
     .      .  170: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  171: 				locktimers[*(int*)tID] += wait_time;
     .      .  172: 
     .    175  173: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  174: 				__sync_lock_release(curr_spin_lock);
     .      .  175: 				break;
     .      .  176: 	
     .      .  177: 			// Without locks
     .      .  178: 			default:
     .      .  179: //				fprintf(stderr, "Inside insertion, thread %d\n", i);
     .      .  180: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  181: 				break;
     .      .  182: 		}
     .      .  183: 	}
     .      .  184: 
     .      .  185: //	fprintf(stderr, "After insertion\n");
     .      .  186: 
     .      .  187: 	/* Course Grained Locking */
     .      .  188: 	// switch(m_sync){
     .      .  189: 	//
     .      .  190: 	// // Mutex
     .      .  191: 	// case 'm':
     .      .  192: 	//	
     .      .  193: 	// 	// Time the wait for thread to acquire mutex
     .      .  194: 	// 	if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  195: 	// 		fprintf(stderr, "Error getting lock start time\n");
     .      .  196: 	// 		exit(1);
     .      .  197: 	// 	}
     .      .  198: 	// 	pthread_mutex_lock(&mutex);
     .      .  199: 	// 	if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  200: 	// 		fprintf(stderr, "Error getting lock end time\n");
     .      .  201: 	// 		exit(1);
     .      .  202: 	// 	}
     .      .  203: 	//
     .      .  204: 	// 	// Calculate wait time
     .      .  205: 	// 	long long wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  206: 	// 	locktimers[*(int*)tID] = wait_time;
     .      .  207: 	//
     .      .  208: 	// 	break;
     .      .  209: 	//
     .      .  210: 	// // Spin-lock
     .      .  211: 	// case 's':
     .      .  212: 	// 	while(__sync_lock_test_and_set(&spin_lock, 1))
     .      .  213: 	// 		;
     .      .  214: 	// 	break;
     .      .  215: 	//
     .      .  216: 	// // Without locks
     .      .  217: 	// default:
     .      .  218: 	// 	break;
     .      .  219: 	// }
     .      .  220: 	//
     .      .  221: 	// int i;
     .      .  222: 	// for(i = *(int*)tID; i < numelems; i+= numthreads)
     .      .  223: 	// 	SortedList_insert(list, &elements[i]);
     .      .  224: 
     .      .  225: 	// Get the list length
     .      .  226: 
     .      .  227: //	fprintf(stderr, "Before listlen\n");
     .      .  228: 
     .      .  229: 	/* Fine Grained Locking */
     .      .  230: 	int listlen = 0, k = 0, ret = 0;
     .      .  231: 	long long wait_time;
     .      .  232: 	switch(m_sync){
     .      .  233: 		
     .      .  234: 		// Mutex
     .      .  235: 		case 'm':
     .      .  236: 
     .      .  237: 
     .      .  238: 			// Time the wait for thread to acquire mutex
     .      .  239: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  240: 				fprintf(stderr, "Error getting lock start time\n");
     .      .  241: 				exit(1);
     .      .  242: 			}
     .      .  243: 			// First, acquire all of the locks
     .      .  244: 			for(k = 0; k < numlists; k++){
     .      .  245: 				pthread_mutex_lock(&sublist_arr[k].mutex);
     .      .  246: 			}
     .      .  247: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  248: 				fprintf(stderr, "Error getting lock end time\n");
     .      .  249: 				exit(1);
     .      .  250: 			}
     .      .  251: 			// Calculate wait time
     .      .  252: 			wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  253: 			locktimers[*(int*)tID] += wait_time;
     .      .  254: 
     .      .  255: 			// Then, safely iterate the list without sudden updates
     .      .  256: 			for(k = 0; k < numlists; k++){
     .      .  257: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  258: 				if(ret < 0){
     .      .  259: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  260: 					exit(1);
     .      .  261: 				}
     .      .  262: 				listlen += ret;
     .      .  263: 			}
     .      .  264: 
     .      .  265: 			// Lastly, release all of the locks
     .      .  266: 			for(k = 0; k < numlists; k++){
     .      .  267: 				pthread_mutex_unlock(&sublist_arr[k].mutex);
     .      .  268: 			}
     .      .  269: 			break;
     .      .  270: 
     .      .  271: 		// Spin-lock
     .      .  272: 		case 's':
     .      .  273: 
     .      .  274: 			// Time the wait for thread to acquire spin-lock
     .      .  275: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  276: 				fprintf(stderr, "Error getting lock start time\n");
     .      .  277: 				exit(1);
     .      .  278: 			}
     .      .  279: 			// First, acquire all of the locks
     .      .  280: 			for(k = 0; k < numlists; k++){
     .      .  281: 				curr_spin_lock = &sublist_arr[k].spin_lock;
     .      .  282: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  283: 					;
     .      .  284: 			}
     .      .  285: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  286: 				fprintf(stderr, "Error getting lock end time\n");
     .      .  287: 				exit(1);
     .      .  288: 			}
     .      .  289: 			// Calculate wait time
     .      .  290: 			wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  291: 			locktimers[*(int*)tID] += wait_time;
     .      .  292: 
     .      .  293: 			// Then safely iterate the list without sudden updates
     .      .  294: 			for(k = 0; k < numlists; k++){
     .      .  295: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  296: 				if(ret < 0){
     .      .  297: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  298: 					exit(1);
     .      .  299: 				}
     .      .  300: 				listlen += ret;
     .      .  301: 			}
     .      .  302: 
     .      .  303: 			// Lastly, release all of the locks
     .      .  304: 			for(k = 0; k < numlists; k++){
     .      .  305: 				curr_spin_lock = &sublist_arr[k].spin_lock;
     .      .  306: 				__sync_lock_release(curr_spin_lock);
     .      .  307: 			}
     .      .  308: 			break;
     .      .  309: 
     .      .  310: 		// Without locks
     .      .  311: 		default:
     .      .  312: //			fprintf(stderr, "Inside listlen\n");
     .      .  313: 			for(k = 0; k < numlists; k++){
     .      .  314: 
     .      .  315: //				fprintf(stderr, "Inside listlen forloop, k: %d\n", k);
     .      .  316: 				
     .      .  317: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  318: 				if(ret < 0){
     .      .  319: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  320: 					exit(1);
     .      .  321: 				}
     .      .  322: 				listlen += ret;
     .      .  323: 			}
     .      .  324: 			break;
     .      .  325: 	}
     .      .  326: 
     .      .  327: //	fprintf(stderr, "After listlen\n");
     .      .  328: 
     .      .  329: 	/* Course Grained Locking */
     .      .  330: 	// listlen = SortedList_length(list);
     .      .  331: 	//
     .      .  332: 	// // Check if the length of list is zero
     .      .  333: 	// if(listlen == -1){
     .      .  334: 	// 	fprintf(stderr, "Error: List length is corrupted after insertion; it is: %d\n",listlen);
     .      .  335: 	// 	exit(2);
     .      .  336: 	// }
     .      .  337: 
     .      .  338: 	// Look up and delete each of the keys it had previously inserted
     .      .  339: 	
     .      .  340:    	/* Fine Grained Locking */
     .      .  341: 	// int j;
     .      .  342: 	// for(j = *(int*)tID; j < numelems; j+= numthreads){
     .      .  343: 	// 	switch(m_sync){
     .      .  344: 	//
     .      .  345: 	// 		// Mutex
     .      .  346: 	// 		case 'm':
     .      .  347: 	// 			pthread_mutex_lock(&mutex);
     .      .  348: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  349: 	// 			pthread_mutex_unlock(&mutex);
     .      .  350: 	//
     .      .  351: 	// 		// Spin-lock
     .      .  352: 	// 		case 's':
     .      .  353: 	// 			while(__sync_lock_test_and_set(&spin_lock, 1))
     .      .  354: 	// 				;
     .      .  355: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  356: 	// 			__sync_lock_release(&spin_lock);
     .      .  357: 	//
     .      .  358: 	// 		// Without locks
     .      .  359: 	// 		default:
     .      .  360: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  361: 	// 			break;
     .      .  362: 	// 	}
     .      .  363: 	// }
     .      .  364: 
     .      .  365: //	fprintf(stderr, "Before delete\n");
     .      .  366: 
     .      .  367: 	int j;
     .      .  368: 	for(j = *(int*)tID; j < numelems; j+= numthreads){
     .      .  369: 
     .      .  370: //		fprintf(stderr, "Before sublist\n");
     .      .  371: 
     .      2  372: 		sublist = &sublist_arr[hash(elements[j].key) % numlists];
     .      .  373: 		SortedListElement_t *ret_elem;
     .      .  374: 		long long wait_time;
     .      .  375: 
     .      .  376: //		fprintf(stderr, "After sublist\n");
     .      .  377: 		switch(m_sync){
     .      .  378: 			
     .      .  379: 			// Mutex
     .      .  380: 			case 'm':
     .      .  381: 				curr_mutex = &sublist->mutex;
     .      .  382: 
     .      .  383: 				// Time the wait for thread to acquire mutex
     .      .  384: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  385: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  386: 					exit(1);
     .      .  387: 				}
     .      .  388: 				pthread_mutex_lock(curr_mutex);
     .      .  389: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  390: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  391: 					exit(1);
     .      .  392: 				}
     .      .  393: 
     .      .  394: 				// Calculate wait time
     .      .  395: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  396: 				locktimers[*(int*)tID] += wait_time;
     .      .  397: 
     .      .  398: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  399: 				if(ret_elem == NULL){
     .      .  400: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  401: 					exit(1);
     .      .  402: 				}
     .      .  403: 				if(SortedList_delete(ret_elem) != 0){
     .      .  404: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  405: 					exit(1);
     .      .  406: 				}
     .      .  407: 				pthread_mutex_unlock(curr_mutex);
     .      .  408: 				break;
     .      .  409: 			
     .      .  410: 			// Spin-lock
     .      .  411: 			case 's':
     .      .  412: 				curr_spin_lock = &sublist->spin_lock;
     .      .  413: 
     .      .  414: 				// Time the wait for thread to acquire spin-lock
     .      .  415: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  416: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  417: 					exit(1);
     .      .  418: 				}
   472    472  419: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  420: 					;
     .      .  421: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  422: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  423: 					exit(1);
     .      .  424: 				}
     .      .  425: 
     .      .  426: 				// Calculate wait time
     .      .  427: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  428: 				locktimers[*(int*)tID] += wait_time;
     .      .  429: 
     .    164  430: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  431: 				if(ret_elem == NULL){
     .      .  432: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  433: 					exit(1);
     .      .  434: 				}
     .      .  435: 				if(SortedList_delete(ret_elem) != 0){
     .      .  436: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  437: 					exit(1);
     .      .  438: 				}
     .      .  439: 				__sync_lock_release(curr_spin_lock);
     .      .  440: 				break;
     .      .  441: 	
     .      .  442: 			// Without locks
     .      .  443: 			default:
     .      .  444: //				fprintf(stderr, "Inside delete\n");
     .      .  445: 
     .      .  446: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  447: 				if(ret_elem == NULL){
     .      .  448: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  449: 					exit(1);
     .      .  450: 				}
     .      .  451: 				if(SortedList_delete(ret_elem) != 0){
     .      .  452: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  453: 					exit(1);
     .      .  454: 				}
     .      .  455: 				break;
     .      .  456: 		}
     .      .  457: 	}
     .      .  458: 
     .      .  459: //	fprintf(stderr, "After delete\n");
     .      .  460: 
     .      .  461: 	// Course Grained Locking
     .      .  462: 	// int j;
     .      .  463: 	// for(j = *(int*)tID; j < numelems; j+= numthreads)
     .      .  464: 	// 	SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  465: 	//
     .      .  466: 	// switch(m_sync){
     .      .  467: 	//
     .      .  468: 	// 	// Mutex
     .      .  469: 	// 	case 'm':
     .      .  470: 	// 		pthread_mutex_unlock(&mutex);
     .      .  471: 	// 		break;
     .      .  472: 	//	
     .      .  473: 	// 	// Spin-lock
     .      .  474: 	// 	case 's':
     .      .  475: 	// 		__sync_lock_release(&spin_lock);
     .      .  476: 	// 		break;
     .      .  477: 	//
     .      .  478: 	// 	// Without locks
     .      .  479: 	// 	default:
     .      .  480: 	// 		break;
     .      .  481: 	// }
     .      .  482: 
     .      .  483: 
     .      .  484: 	// Get the list length
     .      .  485: 	// listlen = SortedList_length(list);
     .      .  486: 
     .      .  487: 	return NULL;
     .      .  488: }
---
     .      .  489: 
     .      .  490: // Main routine 
     .      .  491: int main(int argc, char *argv[]){
     .      .  492: 
     .      .  493: 	// Default values
ROUTINE ====================== worker in /u/eng/ugrad/beb/lab2b/lab2_list.c
   958   1300 Total samples (flat / cumulative)
     .      .  105: 
     .      .  106:     return hash;
     .      .  107: }
     .      .  108: 
     .      .  109: // Thread routine
---
     .      .  110: void* worker(void* tID){
     .      .  111: 
     .      .  112: 	// Lock timers
     .      .  113: 	struct timespec lock_start, lock_end;
     .      .  114: 
     .      .  115: 	SubList_t *sublist;
     .      .  116: 	pthread_mutex_t *curr_mutex;
     .      .  117: 	int *curr_spin_lock;
     .      .  118: 
     .      .  119: 	// Insert elements into list
     .      .  120: 
     .      .  121: //	fprintf(stderr, "Before insertion\n");
     .      .  122: 
     .      .  123: 	/* Fine Grained Locking */
     .      .  124: 	int i;
     .      .  125: 	for(i = *(int*)tID; i < numelems; i+= numthreads){
     .      .  126: 		sublist = &sublist_arr[hash(elements[i].key) % numlists];
     .      .  127: 		long long wait_time;
     .      .  128: 		switch(m_sync){
     .      .  129: 			
     .      .  130: 			// Mutex
     .      .  131: 			case 'm':
     .      .  132: 				curr_mutex = &sublist->mutex;
     .      .  133: 				
     .      .  134: 				// Time the wait for thread to acquire mutex
     .      .  135: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  136: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  137: 					exit(1);
     .      .  138: 				}
     .      .  139: 				pthread_mutex_lock(curr_mutex);
     .      .  140: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  141: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  142: 					exit(1);
     .      .  143: 				}
     .      .  144: 
     .      .  145: 				// Calculate wait time
     .      .  146: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  147: 				locktimers[*(int*)tID] += wait_time;
     .      .  148: 
     .      .  149: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  150: 				pthread_mutex_unlock(curr_mutex);
     .      .  151: 				break;
     .      .  152: 			
     .      .  153: 			// Spin-lock
     .      .  154: 			case 's':
     .      .  155: 				curr_spin_lock = &sublist->spin_lock;
     .      .  156: 
     .      .  157: 				// Time the wait for thread to acquire spin-lock
     .      1  158: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  159: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  160: 					exit(1);
     .      .  161: 				}
   486    486  162: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  163: 					;
     .      .  164: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  165: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  166: 					exit(1);
     .      .  167: 				}
     .      .  168: 
     .      .  169: 				// Calculate wait time
     .      .  170: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  171: 				locktimers[*(int*)tID] += wait_time;
     .      .  172: 
     .    175  173: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  174: 				__sync_lock_release(curr_spin_lock);
     .      .  175: 				break;
     .      .  176: 	
     .      .  177: 			// Without locks
     .      .  178: 			default:
     .      .  179: //				fprintf(stderr, "Inside insertion, thread %d\n", i);
     .      .  180: 				SortedList_insert(&sublist->list, &elements[i]);
     .      .  181: 				break;
     .      .  182: 		}
     .      .  183: 	}
     .      .  184: 
     .      .  185: //	fprintf(stderr, "After insertion\n");
     .      .  186: 
     .      .  187: 	/* Course Grained Locking */
     .      .  188: 	// switch(m_sync){
     .      .  189: 	//
     .      .  190: 	// // Mutex
     .      .  191: 	// case 'm':
     .      .  192: 	//	
     .      .  193: 	// 	// Time the wait for thread to acquire mutex
     .      .  194: 	// 	if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  195: 	// 		fprintf(stderr, "Error getting lock start time\n");
     .      .  196: 	// 		exit(1);
     .      .  197: 	// 	}
     .      .  198: 	// 	pthread_mutex_lock(&mutex);
     .      .  199: 	// 	if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  200: 	// 		fprintf(stderr, "Error getting lock end time\n");
     .      .  201: 	// 		exit(1);
     .      .  202: 	// 	}
     .      .  203: 	//
     .      .  204: 	// 	// Calculate wait time
     .      .  205: 	// 	long long wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  206: 	// 	locktimers[*(int*)tID] = wait_time;
     .      .  207: 	//
     .      .  208: 	// 	break;
     .      .  209: 	//
     .      .  210: 	// // Spin-lock
     .      .  211: 	// case 's':
     .      .  212: 	// 	while(__sync_lock_test_and_set(&spin_lock, 1))
     .      .  213: 	// 		;
     .      .  214: 	// 	break;
     .      .  215: 	//
     .      .  216: 	// // Without locks
     .      .  217: 	// default:
     .      .  218: 	// 	break;
     .      .  219: 	// }
     .      .  220: 	//
     .      .  221: 	// int i;
     .      .  222: 	// for(i = *(int*)tID; i < numelems; i+= numthreads)
     .      .  223: 	// 	SortedList_insert(list, &elements[i]);
     .      .  224: 
     .      .  225: 	// Get the list length
     .      .  226: 
     .      .  227: //	fprintf(stderr, "Before listlen\n");
     .      .  228: 
     .      .  229: 	/* Fine Grained Locking */
     .      .  230: 	int listlen = 0, k = 0, ret = 0;
     .      .  231: 	long long wait_time;
     .      .  232: 	switch(m_sync){
     .      .  233: 		
     .      .  234: 		// Mutex
     .      .  235: 		case 'm':
     .      .  236: 
     .      .  237: 
     .      .  238: 			// Time the wait for thread to acquire mutex
     .      .  239: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  240: 				fprintf(stderr, "Error getting lock start time\n");
     .      .  241: 				exit(1);
     .      .  242: 			}
     .      .  243: 			// First, acquire all of the locks
     .      .  244: 			for(k = 0; k < numlists; k++){
     .      .  245: 				pthread_mutex_lock(&sublist_arr[k].mutex);
     .      .  246: 			}
     .      .  247: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  248: 				fprintf(stderr, "Error getting lock end time\n");
     .      .  249: 				exit(1);
     .      .  250: 			}
     .      .  251: 			// Calculate wait time
     .      .  252: 			wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  253: 			locktimers[*(int*)tID] += wait_time;
     .      .  254: 
     .      .  255: 			// Then, safely iterate the list without sudden updates
     .      .  256: 			for(k = 0; k < numlists; k++){
     .      .  257: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  258: 				if(ret < 0){
     .      .  259: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  260: 					exit(1);
     .      .  261: 				}
     .      .  262: 				listlen += ret;
     .      .  263: 			}
     .      .  264: 
     .      .  265: 			// Lastly, release all of the locks
     .      .  266: 			for(k = 0; k < numlists; k++){
     .      .  267: 				pthread_mutex_unlock(&sublist_arr[k].mutex);
     .      .  268: 			}
     .      .  269: 			break;
     .      .  270: 
     .      .  271: 		// Spin-lock
     .      .  272: 		case 's':
     .      .  273: 
     .      .  274: 			// Time the wait for thread to acquire spin-lock
     .      .  275: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  276: 				fprintf(stderr, "Error getting lock start time\n");
     .      .  277: 				exit(1);
     .      .  278: 			}
     .      .  279: 			// First, acquire all of the locks
     .      .  280: 			for(k = 0; k < numlists; k++){
     .      .  281: 				curr_spin_lock = &sublist_arr[k].spin_lock;
     .      .  282: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  283: 					;
     .      .  284: 			}
     .      .  285: 			if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  286: 				fprintf(stderr, "Error getting lock end time\n");
     .      .  287: 				exit(1);
     .      .  288: 			}
     .      .  289: 			// Calculate wait time
     .      .  290: 			wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  291: 			locktimers[*(int*)tID] += wait_time;
     .      .  292: 
     .      .  293: 			// Then safely iterate the list without sudden updates
     .      .  294: 			for(k = 0; k < numlists; k++){
     .      .  295: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  296: 				if(ret < 0){
     .      .  297: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  298: 					exit(1);
     .      .  299: 				}
     .      .  300: 				listlen += ret;
     .      .  301: 			}
     .      .  302: 
     .      .  303: 			// Lastly, release all of the locks
     .      .  304: 			for(k = 0; k < numlists; k++){
     .      .  305: 				curr_spin_lock = &sublist_arr[k].spin_lock;
     .      .  306: 				__sync_lock_release(curr_spin_lock);
     .      .  307: 			}
     .      .  308: 			break;
     .      .  309: 
     .      .  310: 		// Without locks
     .      .  311: 		default:
     .      .  312: //			fprintf(stderr, "Inside listlen\n");
     .      .  313: 			for(k = 0; k < numlists; k++){
     .      .  314: 
     .      .  315: //				fprintf(stderr, "Inside listlen forloop, k: %d\n", k);
     .      .  316: 				
     .      .  317: 				ret = SortedList_length(&sublist_arr[k].list);
     .      .  318: 				if(ret < 0){
     .      .  319: 					fprintf(stderr, "One or more lists is corrupted after insertion\n");
     .      .  320: 					exit(1);
     .      .  321: 				}
     .      .  322: 				listlen += ret;
     .      .  323: 			}
     .      .  324: 			break;
     .      .  325: 	}
     .      .  326: 
     .      .  327: //	fprintf(stderr, "After listlen\n");
     .      .  328: 
     .      .  329: 	/* Course Grained Locking */
     .      .  330: 	// listlen = SortedList_length(list);
     .      .  331: 	//
     .      .  332: 	// // Check if the length of list is zero
     .      .  333: 	// if(listlen == -1){
     .      .  334: 	// 	fprintf(stderr, "Error: List length is corrupted after insertion; it is: %d\n",listlen);
     .      .  335: 	// 	exit(2);
     .      .  336: 	// }
     .      .  337: 
     .      .  338: 	// Look up and delete each of the keys it had previously inserted
     .      .  339: 	
     .      .  340:    	/* Fine Grained Locking */
     .      .  341: 	// int j;
     .      .  342: 	// for(j = *(int*)tID; j < numelems; j+= numthreads){
     .      .  343: 	// 	switch(m_sync){
     .      .  344: 	//
     .      .  345: 	// 		// Mutex
     .      .  346: 	// 		case 'm':
     .      .  347: 	// 			pthread_mutex_lock(&mutex);
     .      .  348: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  349: 	// 			pthread_mutex_unlock(&mutex);
     .      .  350: 	//
     .      .  351: 	// 		// Spin-lock
     .      .  352: 	// 		case 's':
     .      .  353: 	// 			while(__sync_lock_test_and_set(&spin_lock, 1))
     .      .  354: 	// 				;
     .      .  355: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  356: 	// 			__sync_lock_release(&spin_lock);
     .      .  357: 	//
     .      .  358: 	// 		// Without locks
     .      .  359: 	// 		default:
     .      .  360: 	// 			SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  361: 	// 			break;
     .      .  362: 	// 	}
     .      .  363: 	// }
     .      .  364: 
     .      .  365: //	fprintf(stderr, "Before delete\n");
     .      .  366: 
     .      .  367: 	int j;
     .      .  368: 	for(j = *(int*)tID; j < numelems; j+= numthreads){
     .      .  369: 
     .      .  370: //		fprintf(stderr, "Before sublist\n");
     .      .  371: 
     .      2  372: 		sublist = &sublist_arr[hash(elements[j].key) % numlists];
     .      .  373: 		SortedListElement_t *ret_elem;
     .      .  374: 		long long wait_time;
     .      .  375: 
     .      .  376: //		fprintf(stderr, "After sublist\n");
     .      .  377: 		switch(m_sync){
     .      .  378: 			
     .      .  379: 			// Mutex
     .      .  380: 			case 'm':
     .      .  381: 				curr_mutex = &sublist->mutex;
     .      .  382: 
     .      .  383: 				// Time the wait for thread to acquire mutex
     .      .  384: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  385: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  386: 					exit(1);
     .      .  387: 				}
     .      .  388: 				pthread_mutex_lock(curr_mutex);
     .      .  389: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  390: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  391: 					exit(1);
     .      .  392: 				}
     .      .  393: 
     .      .  394: 				// Calculate wait time
     .      .  395: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  396: 				locktimers[*(int*)tID] += wait_time;
     .      .  397: 
     .      .  398: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  399: 				if(ret_elem == NULL){
     .      .  400: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  401: 					exit(1);
     .      .  402: 				}
     .      .  403: 				if(SortedList_delete(ret_elem) != 0){
     .      .  404: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  405: 					exit(1);
     .      .  406: 				}
     .      .  407: 				pthread_mutex_unlock(curr_mutex);
     .      .  408: 				break;
     .      .  409: 			
     .      .  410: 			// Spin-lock
     .      .  411: 			case 's':
     .      .  412: 				curr_spin_lock = &sublist->spin_lock;
     .      .  413: 
     .      .  414: 				// Time the wait for thread to acquire spin-lock
     .      .  415: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_start) == -1){
     .      .  416: 					fprintf(stderr, "Error getting lock start time\n");
     .      .  417: 					exit(1);
     .      .  418: 				}
   472    472  419: 				while(__sync_lock_test_and_set(curr_spin_lock, 1))
     .      .  420: 					;
     .      .  421: 				if(clock_gettime(CLOCK_MONOTONIC, &lock_end) == -1){
     .      .  422: 					fprintf(stderr, "Error getting lock end time\n");
     .      .  423: 					exit(1);
     .      .  424: 				}
     .      .  425: 
     .      .  426: 				// Calculate wait time
     .      .  427: 				wait_time = 1000000000 * (lock_end.tv_sec - lock_start.tv_sec) + (lock_end.tv_nsec - lock_start.tv_nsec);
     .      .  428: 				locktimers[*(int*)tID] += wait_time;
     .      .  429: 
     .    164  430: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  431: 				if(ret_elem == NULL){
     .      .  432: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  433: 					exit(1);
     .      .  434: 				}
     .      .  435: 				if(SortedList_delete(ret_elem) != 0){
     .      .  436: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  437: 					exit(1);
     .      .  438: 				}
     .      .  439: 				__sync_lock_release(curr_spin_lock);
     .      .  440: 				break;
     .      .  441: 	
     .      .  442: 			// Without locks
     .      .  443: 			default:
     .      .  444: //				fprintf(stderr, "Inside delete\n");
     .      .  445: 
     .      .  446: 				ret_elem = SortedList_lookup(&sublist->list, elements[j].key);
     .      .  447: 				if(ret_elem == NULL){
     .      .  448: 					fprintf(stderr, "Error looking up element for deletion\n");
     .      .  449: 					exit(1);
     .      .  450: 				}
     .      .  451: 				if(SortedList_delete(ret_elem) != 0){
     .      .  452: 					fprintf(stderr, "Error in attempt to delete an element\n");
     .      .  453: 					exit(1);
     .      .  454: 				}
     .      .  455: 				break;
     .      .  456: 		}
     .      .  457: 	}
     .      .  458: 
     .      .  459: //	fprintf(stderr, "After delete\n");
     .      .  460: 
     .      .  461: 	// Course Grained Locking
     .      .  462: 	// int j;
     .      .  463: 	// for(j = *(int*)tID; j < numelems; j+= numthreads)
     .      .  464: 	// 	SortedList_delete(SortedList_lookup(list, elements[j].key));
     .      .  465: 	//
     .      .  466: 	// switch(m_sync){
     .      .  467: 	//
     .      .  468: 	// 	// Mutex
     .      .  469: 	// 	case 'm':
     .      .  470: 	// 		pthread_mutex_unlock(&mutex);
     .      .  471: 	// 		break;
     .      .  472: 	//	
     .      .  473: 	// 	// Spin-lock
     .      .  474: 	// 	case 's':
     .      .  475: 	// 		__sync_lock_release(&spin_lock);
     .      .  476: 	// 		break;
     .      .  477: 	//
     .      .  478: 	// 	// Without locks
     .      .  479: 	// 	default:
     .      .  480: 	// 		break;
     .      .  481: 	// }
     .      .  482: 
     .      .  483: 
     .      .  484: 	// Get the list length
     .      .  485: 	// listlen = SortedList_length(list);
     .      .  486: 
     .      .  487: 	return NULL;
     .      .  488: }
---
     .      .  489: 
     .      .  490: // Main routine 
     .      .  491: int main(int argc, char *argv[]){
     .      .  492: 
     .      .  493: 	// Default values
